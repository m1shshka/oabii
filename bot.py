import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask, request
import os
import logging
import json
import re
import requests
import pymorphy3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

try:
    bot = telebot.TeleBot(TOKEN, threaded=False)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    raise

# –ó–∞–≥—Ä—É–∑–∫–∞ FAQ
try:
    with open('faq.json', 'r', encoding='utf-8') as f:
        faq_data = json.load(f)
    logger.info("FAQ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ faq.json: {e}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pymorphy3 –¥–ª—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
morph = pymorphy3.MorphAnalyzer()

# URL Apps Script
APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbyNhhsqtMavUkSN0SvgmiZZMKsWkorAidfrQ5bulQB0KtA3iM8zBp7-Es8TdQOGe9Dkww/exec'

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def create_category_buttons():
    markup = InlineKeyboardMarkup()
    for i, category in enumerate(faq_data['categories']):
        markup.add(InlineKeyboardButton(category['name'], callback_data=f"cat_{i}"))
    markup.add(InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É üîç", callback_data="search"))
    logger.info(f"–°–æ–∑–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {[cat['name'] for cat in faq_data['categories']]}")
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
def create_subcategory_buttons(cat_index):
    markup = InlineKeyboardMarkup()
    try:
        category = faq_data['categories'][cat_index]
        for i, subcategory in enumerate(category['subcategories']):
            markup.add(InlineKeyboardButton(subcategory['name'], callback_data=f"subcat_{cat_index}_{i}"))
        if category['name'] == "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç—É":
            markup.add(InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üìã", callback_data="apply"))
        markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_categories"))
        logger.info(f"–°–æ–∑–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {category['name']}")
    except IndexError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cat_index}")
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
def create_question_buttons(cat_index, subcat_index):
    markup = InlineKeyboardMarkup()
    try:
        subcategory = faq_data['categories'][cat_index]['subcategories'][subcat_index]
        for i, question in enumerate(subcategory['questions'][:5], 1):
            markup.add(InlineKeyboardButton(f"–í–æ–ø—Ä–æ—Å {i} ‚ùì", callback_data=f"q_{question['id']}"))
        markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=f"back_to_subcat_{cat_index}"))
        logger.info(f"–°–æ–∑–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è {subcategory['name']}")
    except IndexError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å: cat_index={cat_index}, subcat_index={subcat_index}")
    return markup

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def get_questions_text(cat_index, subcat_index):
    try:
        subcategory = faq_data['categories'][cat_index]['subcategories'][subcat_index]
        text = f"üìö *{subcategory['name']}*\n\n"
        for i, question in enumerate(subcategory['questions'][:5], 1):
            text += f"_{i}\\. {question['question']}_\n"
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥\\."
        return text
    except IndexError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å: cat_index={cat_index}, subcat_index={subcat_index}")
        return "‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

# –ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–∫–ª–æ–Ω–µ–Ω–∏–π
def search_questions(keyword):
    results = []
    normalized_keyword = morph.parse(keyword)[0].normal_form  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
    for category in faq_data['categories']:
        for subcategory in category['subcategories']:
            for question in subcategory['questions']:
                question_words = question['question'].split()
                answer_words = question['answer'].split()
                for word in question_words + answer_words:
                    normalized_word = morph.parse(word)[0].normal_form
                    if normalized_keyword in normalized_word:
                        results.append(question)
                        break
    return results[:5]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.chat.id}")
        bot.reply_to(
            message,
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ú–∏—Ö–∞–∏–ª!* –Ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—É—á–µ–Ω–∏—è\\. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=create_category_buttons(),
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test
@bot.message_handler(commands=['test'])
def send_test(message):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test –æ—Ç {message.chat.id}")
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–í–æ–ø—Ä–æ—Å 1: –î–∞ ‚úÖ", callback_data="q1_yes"))
        markup.add(InlineKeyboardButton("–í–æ–ø—Ä–æ—Å 1: –ù–µ—Ç ‚ùå", callback_data="q1_no"))
        markup.add(InlineKeyboardButton("–í–æ–ø—Ä–æ—Å 2: –•–æ—Ä–æ—à–æ üëç", callback_data="q2_good"))
        markup.add(InlineKeyboardButton("–í–æ–ø—Ä–æ—Å 2: –ü–ª–æ—Ö–æ üëé", callback_data="q2_bad"))
        bot.reply_to(
            message,
            "üß™ *–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:*",
            reply_markup=markup,
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /test: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search
@bot.message_handler(commands=['search'])
def start_search(message):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /search –æ—Ç {message.chat.id}")
        bot.reply_to(message, "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        bot.register_next_step_handler(message, process_search)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /search: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
def process_search(message):
    try:
        keyword = message.text.strip()
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {keyword} –æ—Ç {message.chat.id}")
        results = search_questions(keyword)
        if results:
            text = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{keyword}':*\n\n"
            markup = InlineKeyboardMarkup()
            for i, result in enumerate(results, 1):
                text += f"_{i}\\. {result['question']}_\n"
                markup.add(InlineKeyboardButton(f"–í–æ–ø—Ä–æ—Å {i} ‚ùì", callback_data=f"q_{result['id']}"))
            markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_categories"))
            bot.reply_to(message, text, reply_markup=markup, parse_mode='MarkdownV2')
        else:
            bot.reply_to(
                message,
                f"üòï –ü–æ –∑–∞–ø—Ä–æ—Å—É *{keyword}* –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\\.",
                reply_markup=create_category_buttons(),
                parse_mode='MarkdownV2'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=create_category_buttons())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
def start_application(message):
    try:
        user_data = {"telegramId": str(message.chat.id)}
        logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞—è–≤–∫–∏ –¥–ª—è {message.chat.id}: {user_data}")
        bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ù–æ—Å–∏–∫–æ–≤ –ú–∏—Ö–∞–∏–ª –í–∞–ª–µ—Ä—å–µ–≤–∏—á):")
        bot.register_next_step_handler(message, process_name, user_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")

def process_name(message, user_data):
    try:
        user_data["fio"] = message.text.strip()
        logger.info(f"–§–ò–û: {user_data['fio']} –¥–ª—è {message.chat.id}")
        bot.reply_to(message, "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79511121899):")
        bot.register_next_step_handler(message, process_phone, user_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –§–ò–û: {e}")

def process_phone(message, user_data):
    try:
        user_data["phone"] = message.text.strip()
        logger.info(f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']} –¥–ª—è {message.chat.id}")
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üéì", callback_data=f"prog_vo_{message.chat.id}"))
        markup.add(InlineKeyboardButton("–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ üõ†Ô∏è", callback_data=f"prog_spo_{message.chat.id}"))
        bot.reply_to(
            message,
            "üéì *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è:*",
            reply_markup=markup,
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {call.data} –æ—Ç {call.message.chat.id}")
        data = call.data

        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        if data in ["q1_yes", "q1_no", "q2_good", "q2_bad"]:
            answers = {"q1_yes": "–î–∞ ‚úÖ", "q1_no": "–ù–µ—Ç ‚ùå", "q2_good": "–•–æ—Ä–æ—à–æ üëç", "q2_bad": "–ü–ª–æ—Ö–æ üëé"}
            bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {answers[data]}")
            bot.send_message(
                call.message.chat.id,
                f"‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç:* {answers[data]}",
                parse_mode='MarkdownV2'
            )
            return

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        if data.startswith("cat_"):
            cat_index = int(data[4:])
            bot.answer_callback_query(call.id)
            category_name = faq_data['categories'][cat_index]['name']
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"üìö *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ '{category_name}':*",
                reply_markup=create_subcategory_buttons(cat_index),
                parse_mode='MarkdownV2'
            )
            return

        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if data.startswith("subcat_"):
            cat_index, subcat_index = map(int, data[7:].split("_"))
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=get_questions_text(cat_index, subcat_index),
                reply_markup=create_question_buttons(cat_index, subcat_index),
                parse_mode='MarkdownV2'
            )
            return

        # –í–æ–ø—Ä–æ—Å—ã
        if data.startswith("q_"):
            question_id = int(data[2:])
            for category in faq_data['categories']:
                for subcategory in category['subcategories']:
                    for question in subcategory['questions']:
                        if question['id'] == question_id:
                            bot.answer_callback_query(call.id)
                            bot.send_message(
                                call.message.chat.id,
                                f"‚ùì *–í–æ–ø—Ä–æ—Å:* {question['question']}\n\n‚úÖ *–û—Ç–≤–µ—Ç:* {question['answer']}",
                                reply_markup=create_category_buttons(),
                                parse_mode='MarkdownV2'
                            )
                            return

        # –ó–∞—è–≤–∫–∞
        if data == "apply":
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                "üìù *–ù–∞—á–Ω–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:*",
                parse_mode='MarkdownV2'
            )
            start_application(call.message)
            return

        # –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è
        if data.startswith("prog_"):
            parts = data.split("_")
            program = "–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ" if parts[1] == "vo" else "–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ"
            chat_id = int(parts[2])
            user_data = {
                "telegramId": str(chat_id),
                "fio": call.message.text if hasattr(call.message, 'text') else "",
                "phone": "",
                "program": program
            }
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å user_data –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if hasattr(call.message, 'reply_to_message'):
                user_data["phone"] = call.message.reply_to_message.text if call.message.reply_to_message else ""
                if hasattr(call.message.reply_to_message, 'reply_to_message'):
                    user_data["fio"] = call.message.reply_to_message.reply_to_message.text if call.message.reply_to_message.reply_to_message else ""
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏: {user_data}")
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                "‚úÖ *–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\\!* –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏\\.",
                reply_markup=create_category_buttons(),
                parse_mode='MarkdownV2'
            )
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Apps Script
            response = requests.post(APPS_SCRIPT_URL, json=user_data)
            if response.json().get('status') == 'success':
                logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {user_data}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.json()}")
            return

        # –í–æ–∑–≤—Ä–∞—Ç
        if data == "back_to_categories":
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìö *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*",
                reply_markup=create_category_buttons(),
                parse_mode='MarkdownV2'
            )
            return

        if data.startswith("back_to_subcat_"):
            cat_index = int(data[15:])
            category_name = faq_data['categories'][cat_index]['name']
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"üìö *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ '{category_name}':*",
                reply_markup=create_subcategory_buttons(cat_index),
                parse_mode='MarkdownV2'
            )
            return

        # –ü–æ–∏—Å–∫
        if data == "search":
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                "üîç *–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:*",
                parse_mode='MarkdownV2'
            )
            bot.register_next_step_handler(call.message, process_search)
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
@app.route(f"/{TOKEN}", methods=['POST'])
def get_message():
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –æ—Ç Telegram")
        json_string = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        if update:
            bot.process_new_updates([update])
        return "!", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return "!", 500

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def webhook():
    try:
        bot.remove_webhook()
        bot.set_webhook(url=f"https://oabii.onrender.com/{TOKEN}")
        return "Webhook set!", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return "Webhook error", 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
